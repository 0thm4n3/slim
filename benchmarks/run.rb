#!/usr/bin/env ruby

$:.unshift(File.join(File.dirname(__FILE__), '..', 'lib'), File.join(File.dirname(__FILE__), 'src'))

require 'slim'
require 'complex_view'

require 'benchmark'
require 'ostruct'
require 'erubis'
require 'erb'
require 'haml'

class SlimBenchmarks
  def initialize(slow, iterations)
    @iterations = (iterations || 1000).to_i
    @benches    = []

    tpl_erb  = File.read(File.dirname(__FILE__) + '/src/complex.erb')
    tpl_haml = File.read(File.dirname(__FILE__) + '/src/complex.haml')
    tpl_slim = File.read(File.dirname(__FILE__) + '/src/complex.slim')

    view  = ComplexView.new
    eview = OpenStruct.new(:header => view.header, :item => view.item).instance_eval{ binding }

    erb         = ERB.new(tpl_erb)
    erubis      = Erubis::Eruby.new(tpl_erb)
    fast_erubis = Erubis::FastEruby.new(tpl_erb)
    haml        = Haml::Engine.new(tpl_haml, :format => :html5)
    haml_ugly   = Haml::Engine.new(tpl_haml, :format => :html5, :ugly => true)
    slim        = Slim::Template.new { tpl_slim }

    haml.def_method(view, :run_haml)
    haml_ugly.def_method(view, :run_haml_ugly)
    view.instance_eval %{
      def run_erb; #{erb.src}; end
      def run_erubis; #{erubis.src}; end
      def run_fast_erubis; #{fast_erubis.src}; end
      def run_slim; #{slim.precompiled_template}; end
    }

    if slow
      bench('erb (1)')         { ERB.new(tpl_erb).result(eview) }
      bench('erubis (1)')      { Erubis::Eruby.new(tpl_erb).result(eview) }
      bench('fast erubis (1)') { Erubis::Eruby.new(tpl_erb).result(eview) }
      bench('slim (1)')        { Slim::Template.new { tpl_slim }.render(view) }
      bench('haml (1)')        { Haml::Engine.new(tpl_haml, :format => :html5).render(view) }
      bench('haml ugly (1)')   { Haml::Engine.new(tpl_haml, :format => :html5, :ugly => true).render(view) }
    end

    bench('erb (2)')         { erb.result(eview) }
    bench('erubis (2)')      { erubis.result(eview) }
    bench('fast (2)')        { fast_erubis.result(eview) }
    bench('slim (2)')        { slim.render(view) }
    bench('haml (2)')        { haml.render(view) }
    bench('haml (2)')        { haml_ugly.render(view) }

    bench('erb (3)')         { view.run_erb }
    bench('erubis (3)')      { view.run_erubis }
    bench('fast erubis (3)') { view.run_fast_erubis }
    bench('slim (3)')        { view.run_slim }
    bench('haml (3)')        { view.run_haml }
    bench('haml ugly (3)')   { view.run_haml_ugly }
  end

  def run
    puts "#{@iterations} Iterations"
    Benchmark.bmbm do |x|
      @benches.each do |name, block|
        x.report name.to_s do
          @iterations.to_i.times { block.call }
        end
      end
    end
    puts "
1. Uncached benchmark. Template is parsed every time.
   Activate this benchmark with slow=1.

2. Cached benchmark. Template is parsed before the benchmark.
   The ruby code generated by the template engine might be evaluated every time.
   This benchmark uses the standard API of the template engine.

3. Compiled benchmark. Template is parsed before the benchmark and
   generated ruby code is compiled into a method.
   This is the fastest evaluation strategy because it benchmarks
   pure execution speed of the generated ruby code.

"
  end

  def bench(name, &block)
    @benches.push([name, block])
  end
end

SlimBenchmarks.new(ARGV[0], ARGV[1]).run
